require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe UsersController do

  # This should return the minimal set of attributes required to create a valid
  # Session. As you add validations to Session, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { {email: 'test@test.com', password: 'testtest', password_confirmation: 'testtest'} }
  let(:invalid_attributes) { {email: 'test@test.com', password: 'wrong', password_confirmation: 'password'} }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # UsersController. Be sure to keep this updated too.
  let(:invalid_session) { {} }

  describe "POST create" do
    describe "with valid params" do
      it "creates a new user" do
        expect {
          post :create, {user: valid_attributes, format: :json}, invalid_session
        }.to change(User, :count).by(1)
      end
    end

    describe "with invalid params" do
      it "does not create the user" do
        expect {
          post :create, {user: invalid_attributes, format: :json}, invalid_session
        }.to change(User, :count).by(0)
      end

      it "indicates the failure" do
        post :create, {user: invalid_attributes, format: :json}, invalid_session
        JSON.parse(response.body).should == {"errors"=>{"password"=>["does not match"]}}
      end
    end
  end

  describe "fetching users" do
    before(:each) { @user = create(:user) }
    it "can retrive a user by id" do
      get :show, {id: @user.id, format: :json}, {user_id: @user.id}
    end
  end

end
