require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe SessionsController do

  let(:user) { create(:user) }

  # This should return the minimal set of attributes required to create a valid
  # Session. As you add validations to Session, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { {email: 'test@test.com', password: 'testtest'} }
  let(:invalid_attributes) { {email: 'test@test.com', password: 'wrong'} }

  let(:success) { {success: true}.to_json }
  let(:failure) { {success: false, errors: ["Login failed."]}.to_json }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # SessionsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  before :each do
    user
    @request.env["devise.mapping"] = Devise.mappings[:user]
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new session" do
        post :create, {user: valid_attributes, format: :json}, valid_session
        response.body.should == success
      end
    end

    describe "with invalid params" do
      it "responds with a failure message" do
        # Trigger the behavior that occurs when invalid params are submitted
        post :create, {user: invalid_attributes, format: :json}, valid_session
        response.body.should == failure
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the session" do
      delete :destroy, {format: :json}, valid_session
      response.body.should == success
    end
  end

end
